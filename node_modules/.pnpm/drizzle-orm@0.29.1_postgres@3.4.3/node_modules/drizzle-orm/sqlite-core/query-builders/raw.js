import { entityKind } from "../../entity.js";
import { QueryPromise } from "../../query-promise.js";
class SQLiteRaw extends QueryPromise {
  constructor(cb, getSQLCb, action, dialect, mapBatchResult) {
    super();
    this.cb = cb;
    this.getSQLCb = getSQLCb;
    this.dialect = dialect;
    this.mapBatchResult = mapBatchResult;
    this.config = { action };
  }
  static [entityKind] = "SQLiteRaw";
  /** @internal */
  config;
  /** @internal */
  getSQL() {
    return this.getSQLCb();
  }
  async execute() {
    return this.cb();
  }
  prepare() {
    return {
      getQuery: () => {
        return this.dialect.sqlToQuery(this.getSQL());
      },
      mapResult: (result, isFromBatch) => {
        return isFromBatch ? this.mapBatchResult(result) : result;
      }
    };
  }
}
export {
  SQLiteRaw
};
//# sourceMappingURL=raw.js.map