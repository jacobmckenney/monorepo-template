import { entityKind } from "../entity.js";
import { NoopLogger } from "../logger.js";
import { fillPlaceholders, sql } from "../sql/sql.js";
import { SQLiteTransaction } from "../sqlite-core/index.js";
import { SQLitePreparedQuery as PreparedQueryBase, SQLiteSession } from "../sqlite-core/session.js";
import { mapResultRow } from "../utils.js";
class SQLiteRemoteSession extends SQLiteSession {
  constructor(client, dialect, schema, options = {}) {
    super(dialect);
    this.client = client;
    this.schema = schema;
    this.logger = options.logger ?? new NoopLogger();
  }
  static [entityKind] = "SQLiteRemoteSession";
  logger;
  prepareQuery(query, fields, executeMethod) {
    return new PreparedQuery(this.client, query, this.logger, fields, executeMethod);
  }
  async transaction(transaction, config) {
    const tx = new SQLiteProxyTransaction("async", this.dialect, this, this.schema);
    await this.run(sql.raw(`begin${config?.behavior ? " " + config.behavior : ""}`));
    try {
      const result = await transaction(tx);
      await this.run(sql`commit`);
      return result;
    } catch (err) {
      await this.run(sql`rollback`);
      throw err;
    }
  }
}
class SQLiteProxyTransaction extends SQLiteTransaction {
  static [entityKind] = "SQLiteProxyTransaction";
  async transaction(transaction) {
    const savepointName = `sp${this.nestedIndex}`;
    const tx = new SQLiteProxyTransaction("async", this.dialect, this.session, this.schema, this.nestedIndex + 1);
    await this.session.run(sql.raw(`savepoint ${savepointName}`));
    try {
      const result = await transaction(tx);
      await this.session.run(sql.raw(`release savepoint ${savepointName}`));
      return result;
    } catch (err) {
      await this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));
      throw err;
    }
  }
}
class PreparedQuery extends PreparedQueryBase {
  constructor(client, query, logger, fields, executeMethod) {
    super("async", executeMethod, query);
    this.client = client;
    this.logger = logger;
    this.fields = fields;
  }
  static [entityKind] = "SQLiteProxyPreparedQuery";
  run(placeholderValues) {
    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});
    this.logger.logQuery(this.query.sql, params);
    return this.client(this.query.sql, params, "run");
  }
  async all(placeholderValues) {
    const { fields, query, logger, joinsNotNullableMap } = this;
    const params = fillPlaceholders(query.params, placeholderValues ?? {});
    logger.logQuery(query.sql, params);
    const { rows } = await this.client(query.sql, params, "all");
    if (fields) {
      return rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));
    }
    return rows;
  }
  async get(placeholderValues) {
    const { fields, query, logger, joinsNotNullableMap } = this;
    const params = fillPlaceholders(query.params, placeholderValues ?? {});
    logger.logQuery(query.sql, params);
    const clientResult = await this.client(query.sql, params, "get");
    if (fields) {
      if (clientResult.rows === void 0) {
        return void 0;
      }
      return mapResultRow(fields, clientResult.rows, joinsNotNullableMap);
    }
    return clientResult.rows;
  }
  async values(placeholderValues) {
    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});
    this.logger.logQuery(this.query.sql, params);
    const clientResult = await this.client(this.query.sql, params, "values");
    return clientResult.rows;
  }
}
export {
  PreparedQuery,
  SQLiteProxyTransaction,
  SQLiteRemoteSession
};
//# sourceMappingURL=session.js.map